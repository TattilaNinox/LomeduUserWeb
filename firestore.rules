rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ────────── Admin-ellenőrzés segédfüggvény ──────────
    function isAdmin() {
      return request.auth != null &&
             request.auth.token.email in [
               'tattila.ninox@gmail.com',
             ];
    }

    // Helper function to check for premium access
    function hasPremiumAccess() {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let now = request.time;
      // The isSubscriptionActive field provides a simple, reliable check
      return userData.isSubscriptionActive == true || 
             (userData.freeTrialEndDate != null && userData.freeTrialEndDate > now);
    }

    // ────────── Felhasználók (+ alsó-gyűjtemények) ──────────
    match /users/{userId} {
      // Admin bármit, a felhasználó csak a saját dokumentumát olvashatja/módosíthatja
      allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == userId);

      // Al-gyűjtemények
      match /learning_states/{noteId} {
        allow read, write, delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
      }
      match /user_learning_data/{docId} {
        allow read, write, delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
      } // legacy
      match /served_questions/{questionId} {
        allow read, write, delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
      }

      // ÚJ alsó-gyűjtemények
      match /categories/{catId}/learning/{docId} {
        allow read, write, delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
      }
      match /category_stats/{catId} {
        allow read, write, delete: if isAdmin() || (request.auth != null && request.auth.uid == userId);
      }

      match /{document=**} {
        allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == userId);
      }
    }

    // ────────── Jegyzetek (minden típus, beleértve: text, interactive, deck, dynamic_quiz, source stb.) ──────────
    match /notes/{noteId} {
      // FREEMIUM MODEL:
      // - LIST: Minden bejelentkezett felhasználó láthatja a Published/Public jegyzetek listáját
      //         (címek, leírások stb.) függetlenül attól, hogy prémium-e vagy sem.
      //         Ez lehetővé teszi, hogy a webes UI megjelenítse a "zárt" jegyzeteket lock ikonnal.
      // - GET: Csak ingyenes jegyzetek (isFree: true) VAGY prémium felhasználók esetén
      //        (részletes tartalom olvasása).
      
      allow list: if request.auth != null &&
                     (isAdmin() || resource.data.status in ['Published', 'Public']);
      
      allow get: if request.auth != null &&
                    (isAdmin() ||
                     (resource.data.status in ['Published', 'Public'] && 
                      (resource.data.isFree == true || hasPremiumAccess())));

      // Létrehozás, törlés: csak admin
      allow create, delete: if isAdmin();

      // Frissítés: admin bármit, nem admin csak az is_selected_for_learning mezőt
      allow update: if isAdmin() ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['is_selected_for_learning']));
    }

    // ────────── Bundles ──────────
    match /bundles/{bundleId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // ────────── Kategóriák ──────────
    match /categories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // ────────── Tudományok ──────────
    match /sciences/{scienceId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // ────────── Kérdésbankok ──────────
    match /question_banks/{bankId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
 
    // ────────── Kétfaktoros hitelesítés (user_2fa) ──────────
    // A felhasználó a saját 2FA dokumentumát olvashatja/írhatja, admin bármit.
    match /user_2fa/{userId} {
      allow read, write: if isAdmin() || (request.auth != null && request.auth.uid == userId);
    }

    // ────────── Források / Irodalom ──────────
    // A források már a notes-gyűjteményben tárolódnak (type == 'source'),
    // ezért külön gyűjteményre nincs szükség. A korábbi /sources útvonalat
    // meghagyjuk csak olvashatónak a visszafelé kompatibilitás érdekében.
    match /sources/{sourceId} {
      // Olvasás bármely bejelentkezett felhasználónak (read-only)
      allow read: if request.auth != null;
      // Írás letiltva – a frissítés már a /notes alatt történik.
      allow write: if false;
    }
        // ────────── Subscription & Payment Collections ──────────
    // Ezek a kollekciók csak Cloud Functions-ök számára elérhetők
    // Admin olvashat, de a Cloud Functions-ök service account-tal működnek
    
    match /play_purchase_tokens/{tokenId} {
      // Csak admin olvashat, írás csak Cloud Functions
      allow read: if isAdmin();
      allow write: if false; // Cloud Functions service account-tal ír
    }
    
    match /verification_queue/{tokenId} {
      // Csak admin olvashat, írás csak Cloud Functions
      allow read: if isAdmin();
      allow write: if false; // Cloud Functions service account-tal ír
    }
    
    match /processedTokens/{tokenId} {
      // Csak admin olvashat, írás csak Cloud Functions
      allow read: if isAdmin();
      allow write: if false; // Cloud Functions service account-tal ír
    }
    
    // ────────── Webes fizetések (SimplePay) ──────────
    match /web_payments/{paymentId} {
      // Felhasználó csak a saját fizetéseit olvashatja
      allow read: if request.auth != null && 
        (isAdmin() || resource.data.userId == request.auth.uid);
      // Írás csak Cloud Functions
      allow write: if false; // Cloud Functions service account-tal ír
    }

    // ────────── Device Change Codes ──────────
    match /device_change_codes/{codeId} {
      // Csak admin és a kód tulajdonosa olvashatja
      allow read: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
      allow write: if false; // Cloud Functions service account-tal ír
    }
  }
}